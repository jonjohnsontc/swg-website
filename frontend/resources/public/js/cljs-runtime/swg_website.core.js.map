{"version":3,"sources":["swg_website/core.cljs"],"mappings":";AAYA,AAIA,AAAA;;;AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFE;AAFJ,AAGG,AAAA,AAAA,AAACC,AAAKD;;;AAHT,AAAA,AAAA,AAAMF,AAIFE,AAAEE;AAJN,AAKG,AAAA,AAACD,AAAKD,AAAEE;;;AALX,AAAA,AAAA,AAAMJ,AAMFE,AAAEE,AAAOC;AANb,AAOG,AAACC,AAASJ,AAAEE,AAAOC;;;AAPtB,AAAA,AAAA,AAAML;;AAAN,AAWA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKO,AAIWC,AAIF;AAAOJ;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AARrB,AAUc;AAAOA;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAVrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAagBM,AAGF;AAAA,AAAO,AAAA,AAAA,AAAA,AAACC;AAhBtB,AAiBc;AAAOP;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAjBrB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoBgBQ,AAGF;AAAOR;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAvBrB,AAwBc;AAAOA;AAAP,AAAe,AAAA,AAACK;;;AAATL;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;AAErB,AAAA,AAAMS,AAAaC;AAAnB,AACE,AAAMA;AAAN,AACE,AAAA,AAAA,AAACH,AAAsCG;;AADzC;;;AAGF,AAAKC,AACH,AAAA,AAAA,AAAA,AAAA,AAACC,AACAT,AACkBU;AAErB,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAACP,AAAwCI;;AACzC,AAAA,AAAA,AAAA,AAACI,AACAJ,AACAF;;AAIH,AAAA,AAAMO;AAAN,AACE,AAAA,AAAAC,AAAMC,AAAc,AAAA,AAAA,AAACC;AAArB,AACG,AAAMD;AAAN,AAAA,AACG,AAAA,AAAA,AAAA,AAAIA;;AADP;;;AAGL,AAAA,AAAME;AAAN,AACE,AAAMC;AAAN,AACE,AAAA,AAACC;;AADH;;;AAGF,AAAA,AAAuBC;AAAvB,AACE,AAACC;;AACD,AAAMC,AAAQ,AAAA,AAAiBC;AAA/B,AACE,AAACC,AAA+BF;;AAChC,AAAA,AAAA,AAAA,AAACG,AAAaZ,AAAaL,AAASc;;AAExC,AAAA,AAAMI;AAAN,AACE,AAAA,AAAA,AAACC;;AACD,AAACV;;AACD,AAACN;;AACD,AAACS","names":["var_args","G__60898","swg-website.core/href","js/Error","k","swg_website.core.href","params","query","reitit.frontend.easy.href","swg-website.core/routes","swg-website.views/home","js/console.log","swg-website.views/results-panel","re-frame.core/dispatch","swg-website.views/writer-panel","swg-website.core/on-navigate","new-match","swg-website.core/router","reitit.frontend.router","reitit.coercion.spec/coercion","swg-website.core/init-routes!","reitit.frontend.easy/start!","swg-website.core/nav","cljs.core/deref","active-route","re_frame.core.subscribe","swg-website.core/dev-setup","swg-website.config/debug?","cljs.core.println","swg-website.core/mount-root","re-frame.core/clear-subscription-cache!","root-el","js/document","reagent.dom/unmount-component-at-node","reagent.dom.render","swg-website.core/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns swg-website.core\n  (:require\n   [reagent.dom :as rdom]\n   [re-frame.core :as re-frame]\n   [reitit.coercion.spec :as rss]\n   [reitit.frontend :as rf]\n   [reitit.frontend.easy :as rfe]\n   [swg-website.events :as events]\n   [swg-website.subs :as subs]\n   [swg-website.views :as views]\n   [swg-website.config :as config]))\n\n(comment\n  ()\n  (c/debug?))\n\n(defn href\n  \"Return relative url for given route. Url can be used in HTML links.\"\n  ([k]\n   (href k nil nil))\n  ([k params]\n   (href k params nil))\n  ([k params query]\n   (rfe/href k params query)))\n\n;; If I don't namespace the route names, it will assume it's within\n;; the namespace of whatever code is being executed :shrug: - not sure why\n(def routes\n  [\"/\"\n   [\"\"\n    {:name      :routes/home\n     :view      views/home\n     :controllers\n     [{;; Do whatever initialization needed for home page\n       ;; I.e (re-frame/dispatch [::events/load-something-with-ajax])\n       :start (fn [& params] (js/console.log \"Entering home page\"))\n       ;; Teardown can be done here.\n       :stop  (fn [& params] (js/console.log \"Leaving home page\"))}]}]\n   [\"search/q=:term\"\n    {:name      :routes/search\n     :view      views/results-panel\n     :link-text \"Search\"\n     :controllers\n     [{:start (fn [] (re-frame/dispatch [::events/get-writers :term]))\n       :stop  (fn [& params] (js/console.log \"Leaving search\"))}]}]\n   [\"writer/:wid\"\n    {:name      :routes/writer\n     :view      views/writer-panel\n     :link-text \"Writer\"\n     :controllers\n     [{:start (fn [& params] (js/console.log \"Entering writer page\"))\n       :stop  (fn [& params] (js/console.log \"Leaving writer page\"))}]}]])\n\n(defn on-navigate [new-match]\n  (when new-match\n    (re-frame/dispatch [::events/navigated new-match])))\n\n(def router\n  (rf/router\n   routes\n   {:data {:coercion rss/coercion}}))\n\n(defn init-routes! []\n  (re-frame/dispatch [::events/init-router router])\n  (rfe/start!\n   router\n   on-navigate\n  ;; '/#/' in your url\n   {:use-fragment false}))\n\n(defn nav []\n  (let [active-route @(re-frame/subscribe [::subs/active-route])]\n     (when active-route\n       [(-> active-route :data :view)])))\n\n(defn dev-setup []\n  (when config/debug?\n    (println \"dev mode\")))\n\n(defn ^:dev/after-load mount-root []\n  (re-frame/clear-subscription-cache!)\n  (let [root-el (.getElementById js/document \"app\")]\n    (rdom/unmount-component-at-node root-el)\n    (rdom/render [nav {:router router}] root-el)))\n\n(defn init []\n  (re-frame/dispatch-sync [::events/initialize-db])\n  (dev-setup)\n  (init-routes!)\n  (mount-root))\n"]}