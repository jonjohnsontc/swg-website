{"version":3,"sources":["swg_website/events.cljs"],"mappings":"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","names":["re-frame.core/reg-fx","route","cljs.core.apply","reitit.frontend.easy/push-state","re_frame.core.reg_event_db","_","swg-website.db/default-db","p__60832","vec__60833","cljs.core.nth","db","id","name","cljs.core.assoc","p__60836","vec__60837","re-frame.core/reg-cofx","cofx","loc","js/document","p__60840","vec__60841","burger-status","cljs.core._EQ_","p__60844","vec__60845","focus","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__60848","vec__60849","router","path","reitit.core/match-by-path","p__60852","vec__60853","seq__60854","cljs.core/seq","first__60855","cljs.core/first","cljs.core/next","p__60856","vec__60857","new-match","old-match","controllers","reitit.frontend.controllers/apply-controllers","p__60860","p__60861","map__60862","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","vec__60863","p__60867","p__60868","map__60869","vec__60870","writer-map","uri","swg-website.config/debug?","ajax.core/json-request-format","ajax.core/json-response-format","p__60874","map__60875","term","cljs.core.get_in","p__60877","p__60878","map__60879","vec__60880","response","swg-website.queries/set-loading-state","swg-website.queries/set-search-results","p__60884","p__60885","map__60886","vec__60887","wid","swg-website.queries/set-neighbors","p__60891","vec__60892","swg-website.queries/set-error-message"],"sourcesContent":["(ns  swg-website.events\n  (:require\n   [ajax.core :as ajax]\n   [re-frame.core :as re-frame]\n   [day8.re-frame.http-fx]\n   [reitit.core :as r]\n   [reitit.frontend.controllers :as rfc]\n   [reitit.frontend.easy :as rfe]\n   [swg-website.config :refer [debug?]]\n   [swg-website.db :as db]\n   [swg-website.queries :as q]))\n\n(comment\n  (* 2 \n     (+ 2 2))\n ,)\n\n;; Effect Registrations\n;; \n\n;; Triggering nav from events\n(re-frame/reg-fx\n :push-state\n (fn [route]\n   (apply rfe/push-state route)))\n\n;; Event Registrations\n;; single effects or pretty simple\n;; \n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(re-frame/reg-event-db\n ::save-name\n (fn [db [_ id name]]\n    (assoc db id name)))\n\n(re-frame/reg-event-db\n ::clear-search\n (fn [db [_]]\n   (assoc db :search-term nil)))\n\n(re-frame/reg-cofx\n ::current-url\n (fn [cofx]\n   (let [loc (.-location js/document)]\n     (assoc cofx ::current-url {:path  (.-pathname loc)\n                                :query (.-search loc)\n                                :hash  (.-hash loc)}))))\n\n(re-frame/reg-event-db\n ::toggle-burger-menu\n (fn [db [_]]\n   (let [burger-status (:burger-menu db)]\n     (if (= true burger-status)\n       (assoc db :burger-menu false)\n       (assoc db :burger-menu true)))))\n\n(re-frame/reg-event-db\n ::toggle-search-bar-focus\n (fn [db [_]]\n   (let [focus (:search-bar-focus db)]\n     (if (= true focus)\n       (assoc db :search-bar-focus false)\n       (assoc db :search-bar-focus true)))))\n\n;; initializes the router and points the app at the proper route\n(re-frame/reg-event-fx\n ::init-router\n [(re-frame/inject-cofx  ::current-url)]\n (fn [cofx [_ router]]\n   (let [path (:path (::current-url cofx))]\n     {:db (assoc (:db cofx)\n                 :active-route (r/match-by-path router path))})))\n\n;; The event used to navigate to a another route\n(re-frame/reg-event-fx\n ::push-state\n (fn [db [_ & route]]\n   {:push-state route}))\n\n;; TODO: Figure out what's happening here\n(re-frame/reg-event-db\n ::navigated\n (fn\n  [db [_ new-match]]\n  (let [old-match (:active-route db)\n        controllers (rfc/apply-controllers (:controllers old-match) new-match)]\n    (assoc db :active-route (assoc new-match :controllers controllers)))))\n\n(re-frame/reg-event-fx\n ::clear-search-and-go-home\n (fn [{db :db} [_]]\n   {:db (assoc db :search-term nil)\n   :dispatch [::push-state :routes/home]}))\n\n;; HTTP Request Related Events \n;; \n(re-frame/reg-event-fx\n ::get-neighbors\n (fn   \n  [{db :db} [_ writer-map]]     ;; <-- 1st argument is coeffect, from which we extract db\n  (let [uri (if (= debug? true) \"http://localhost:5000/neighbors/\" \"/neighbors/\")]\n   {:http-xhrio {:method          :get\n                 :uri             (str uri (:wid writer-map))\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::neighbors-response (:wid writer-map)]\n                 :on-failure      [::bad-response]}\n    :db  (-> db\n             (assoc :loading? true)\n             (assoc :current-writer writer-map))})))\n\n(re-frame/reg-event-fx\n ::get-writers\n (fn\n   [{db :db} _]\n   (let [term (get-in db [:search-term])\n         uri (if (= debug? true) \"http://localhost:5000/writers/name_search/\" \"/writers/name_search/\")]\n     {:http-xhrio {:method          :get\n                   :uri             (str uri term)\n                   :format          (ajax/json-request-format)\n                   :response-format (ajax/json-response-format {:keywords? true})\n                   ; We pass on the search term to the router,\n                   ; which hasn't yet loaded the page\n                   :on-success      [::writers-response term] \n                   :on-failure      [::bad-response]}\n      :db  (assoc db :loading? true)})))\n\n(re-frame/reg-event-fx\n ::writers-response\n (fn\n  [{db :db} [_ term response]]\n  {:db   (-> db\n             (q/set-loading-state false)\n             (q/set-search-results response))}))\n\n(re-frame/reg-event-fx\n ::neighbors-response\n (fn\n  [{db :db} [_ wid response]]\n  {:db   (-> db\n             (q/set-loading-state false)\n             (q/set-neighbors response))\n   :dispatch [::push-state :routes/writer {:wid wid}]}))\n\n(re-frame/reg-event-db\n ::bad-response\n (fn\n   [db [_ response]] \n   (-> db\n       (q/set-loading-state false)\n       (q/set-error-message response))))\n\n\n"]}