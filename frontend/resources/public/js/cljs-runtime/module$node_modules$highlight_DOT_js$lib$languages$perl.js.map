{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$perl.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/perl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$perl\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Perl\nAuthor: Peter Leonov <gojpeg@yandex.ru>\nWebsite: https://www.perl.org\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction perl(hljs) {\n  // https://perldoc.perl.org/perlre#Modifiers\n  const REGEX_MODIFIERS = /[dualxmsipn]{0,12}/; // aa and xx are valid, making max length 12\n  const PERL_KEYWORDS = {\n    $pattern: /[\\w.]+/,\n    keyword: 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' +\n    'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' +\n    'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq ' +\n    'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' +\n    'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget ' +\n    'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' +\n    'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' +\n    'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' +\n    'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' +\n    'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' +\n    'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' +\n    'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' +\n    'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' +\n    'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' +\n    'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' +\n    'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' +\n    'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir ' +\n    'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' +\n    'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when'\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: '[$@]\\\\{',\n    end: '\\\\}',\n    keywords: PERL_KEYWORDS\n  };\n  const METHOD = {\n    begin: /->\\{/,\n    end: /\\}/\n    // contains defined later\n  };\n  const VAR = {\n    variants: [\n      {\n        begin: /\\$\\d/\n      },\n      {\n        begin: concat(\n          /[$%@](\\^\\w\\b|#\\w+(::\\w+)*|\\{\\w+\\}|\\w+(::\\w*)*)/,\n          // negative look-ahead tries to avoid matching patterns that are not\n          // Perl at all like $ident$, @ident@, etc.\n          `(?![A-Za-z])(?![@$%])`\n        )\n      },\n      {\n        begin: /[$%@][^\\s\\w{]/,\n        relevance: 0\n      }\n    ]\n  };\n  const STRING_CONTAINS = [\n    hljs.BACKSLASH_ESCAPE,\n    SUBST,\n    VAR\n  ];\n  const PERL_DEFAULT_CONTAINS = [\n    VAR,\n    hljs.HASH_COMMENT_MODE,\n    hljs.COMMENT(\n      /^=\\w/,\n      /=cut/,\n      {\n        endsWithParent: true\n      }\n    ),\n    METHOD,\n    {\n      className: 'string',\n      contains: STRING_CONTAINS,\n      variants: [\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\(',\n          end: '\\\\)',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\[',\n          end: '\\\\]',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\{',\n          end: '\\\\}',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*\\\\|',\n          end: '\\\\|',\n          relevance: 5\n        },\n        {\n          begin: 'q[qwxr]?\\\\s*<',\n          end: '>',\n          relevance: 5\n        },\n        {\n          begin: 'qw\\\\s+q',\n          end: 'q',\n          relevance: 5\n        },\n        {\n          begin: '\\'',\n          end: '\\'',\n          contains: [ hljs.BACKSLASH_ESCAPE ]\n        },\n        {\n          begin: '\"',\n          end: '\"'\n        },\n        {\n          begin: '`',\n          end: '`',\n          contains: [ hljs.BACKSLASH_ESCAPE ]\n        },\n        {\n          begin: /\\{\\w+\\}/,\n          contains: [],\n          relevance: 0\n        },\n        {\n          begin: '-?\\\\w+\\\\s*=>',\n          contains: [],\n          relevance: 0\n        }\n      ]\n    },\n    {\n      className: 'number',\n      begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n      relevance: 0\n    },\n    { // regexp container\n      begin: '(\\\\/\\\\/|' + hljs.RE_STARTERS_RE + '|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*',\n      keywords: 'split return print reverse grep',\n      relevance: 0,\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        {\n          className: 'regexp',\n          begin: concat(\n            /(s|tr|y)/,\n            /\\//,\n            /(\\\\.|[^\\\\\\/])*/,\n            /\\//,\n            /(\\\\.|[^\\\\\\/])*/,\n            /\\//,\n            REGEX_MODIFIERS,\n          ),\n          relevance: 10\n        },\n        {\n          className: 'regexp',\n          begin: /(m|qr)?\\//,\n          end: concat(\n            /\\//,\n            REGEX_MODIFIERS\n          ),\n          contains: [ hljs.BACKSLASH_ESCAPE ],\n          relevance: 0 // allows empty \"//\" which is a common comment delimiter in other languages\n        }\n      ]\n    },\n    {\n      className: 'function',\n      beginKeywords: 'sub',\n      end: '(\\\\s*\\\\(.*?\\\\))?[;{]',\n      excludeEnd: true,\n      relevance: 5,\n      contains: [ hljs.TITLE_MODE ]\n    },\n    {\n      begin: '-\\\\w\\\\b',\n      relevance: 0\n    },\n    {\n      begin: \"^__DATA__$\",\n      end: \"^__END__$\",\n      subLanguage: 'mojolicious',\n      contains: [\n        {\n          begin: \"^@@.*\",\n          end: \"$\",\n          className: \"comment\"\n        }\n      ]\n    }\n  ];\n  SUBST.contains = PERL_DEFAULT_CONTAINS;\n  METHOD.contains = PERL_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Perl',\n    aliases: [\n      'pl',\n      'pm'\n    ],\n    keywords: PERL_KEYWORDS,\n    contains: PERL_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = perl;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","joined","join","perl","hljs","REGEX_MODIFIERS","PERL_KEYWORDS","$pattern","keyword","SUBST","className","begin","end","keywords","METHOD","VAR","variants","relevance","STRING_CONTAINS","BACKSLASH_ESCAPE","PERL_DEFAULT_CONTAINS","HASH_COMMENT_MODE","COMMENT","endsWithParent","contains","RE_STARTERS_RE","beginKeywords","excludeEnd","TITLE_MODE","subLanguage","name","aliases"]
}
