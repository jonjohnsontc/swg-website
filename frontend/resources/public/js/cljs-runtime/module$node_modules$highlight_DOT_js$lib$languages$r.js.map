{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$r.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/r.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$r\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: scientific\n*/\n\nfunction r(hljs) {\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`\u2026`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  const SIMPLE_IDENT = /[a-zA-Z][a-zA-Z_0-9]*/;\n\n  return {\n    name: 'R',\n\n    // only in Haskell, not R\n    illegal: /->/,\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword:\n        'function if in break next repeat else for while',\n      literal:\n        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' +\n        'NA_character_|10 NA_complex_|10',\n      built_in:\n        // Builtin constants\n        'LETTERS letters month.abb month.name pi T F ' +\n        // Primitive functions\n        // These are all the functions in `base` that are implemented as a\n        // `.Primitive`, minus those functions that are also keywords.\n        'abs acos acosh all any anyNA Arg as.call as.character ' +\n        'as.complex as.double as.environment as.integer as.logical ' +\n        'as.null.default as.numeric as.raw asin asinh atan atanh attr ' +\n        'attributes baseenv browser c call ceiling class Conj cos cosh ' +\n        'cospi cummax cummin cumprod cumsum digamma dim dimnames ' +\n        'emptyenv exp expression floor forceAndCall gamma gc.time ' +\n        'globalenv Im interactive invisible is.array is.atomic is.call ' +\n        'is.character is.complex is.double is.environment is.expression ' +\n        'is.finite is.function is.infinite is.integer is.language ' +\n        'is.list is.logical is.matrix is.na is.name is.nan is.null ' +\n        'is.numeric is.object is.pairlist is.raw is.recursive is.single ' +\n        'is.symbol lazyLoadDBfetch length lgamma list log max min ' +\n        'missing Mod names nargs nzchar oldClass on.exit pos.to.env ' +\n        'proc.time prod quote range Re rep retracemem return round ' +\n        'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt ' +\n        'standardGeneric substitute sum switch tan tanh tanpi tracemem ' +\n        'trigamma trunc unclass untracemem UseMethod xtfrm',\n    },\n\n    contains: [\n      // Roxygen comments\n      hljs.COMMENT(\n        /#'/,\n        /$/,\n        {\n          contains: [\n            {\n              // Handle `@examples` separately to cause all subsequent code\n              // until the next `@`-tag on its own line to be kept as-is,\n              // preventing highlighting. This code is example R code, so nested\n              // doctags shouldn\u2019t be treated as such. See\n              // `test/markup/r/roxygen.txt` for an example.\n              className: 'doctag',\n              begin: '@examples',\n              starts: {\n                contains: [\n                  { begin: /\\n/ },\n                  {\n                    begin: /#'\\s*(?=@[a-zA-Z]+)/,\n                    endsParent: true,\n                  },\n                  {\n                    begin: /#'/,\n                    end: /$/,\n                    excludeBegin: true,\n                  }\n                ]\n              }\n            },\n            {\n              // Handle `@param` to highlight the parameter name following\n              // after.\n              className: 'doctag',\n              begin: '@param',\n              end: /$/,\n              contains: [\n                {\n                  className: 'variable',\n                  variants: [\n                    { begin: IDENT_RE },\n                    { begin: /`(?:\\\\.|[^`\\\\])+`/ }\n                  ],\n                  endsParent: true\n                }\n              ]\n            },\n            {\n              className: 'doctag',\n              begin: /@[a-zA-Z]+/\n            },\n            {\n              className: 'meta-keyword',\n              begin: /\\\\[a-zA-Z]+/,\n            }\n          ]\n        }\n      ),\n\n      hljs.HASH_COMMENT_MODE,\n\n      {\n        className: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\(/, end: /\\)(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\{/, end: /\\}(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\[/, end: /\\](-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\(/, end: /\\)(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\{/, end: /\\}(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\[/, end: /\\](-*)'/ }),\n          {begin: '\"', end: '\"', relevance: 0},\n          {begin: \"'\", end: \"'\", relevance: 0}\n        ],\n      },\n      {\n        className: 'number',\n        variants: [\n          // TODO: replace with negative look-behind when available\n          // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n          // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n          // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n\n          // The below rules all eat an extra character in front (for the\n          // look-behind check) and then exclude it from the match, but I think\n          // in many cases this will work out just fine.\n          {\n            // Special case: only hexadecimal binary powers can contain fractions.\n            begin: /([^a-zA-Z0-9._])(?=0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?)/,\n            end: /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,\n            excludeBegin: true\n          },\n          {\n            begin: /([^a-zA-Z0-9._])(?=0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?)/,\n            end: /0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ ,\n            excludeBegin: true\n          },\n          {\n            begin: /([^a-zA-Z0-9._])(?=(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?)/,\n            end: /(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/,\n            excludeBegin: true\n          }\n        ],\n        // \"on:begin\": (match, response) => {\n        //   if (match.index > 0) {\n        //     let priorChar = match.input[match.index - 1];\n        //     if (priorChar.match(/[a-zA-Z0-9._]/)) response.ignoreMatch();\n        //   }\n        // },\n        relevance: 0\n      },\n\n      {\n        // infix operator\n        begin: '%',\n        end: '%'\n      },\n      // relevance boost for assignment\n      {\n        begin: concat(SIMPLE_IDENT, \"\\\\s+<-\\\\s+\")\n      },\n      {\n        // escaped identifier\n        begin: '`',\n        end: '`',\n        contains: [\n          { begin: /\\\\./ }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = r;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","joined","join","r","hljs","IDENT_RE","name","illegal","keywords","$pattern","keyword","literal","built_in","contains","COMMENT","className","begin","starts","endsParent","end","excludeBegin","variants","HASH_COMMENT_MODE","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","relevance","SIMPLE_IDENT"]
}
